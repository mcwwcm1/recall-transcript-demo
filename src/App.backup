import { useState, useRef } from "react";

export default function App() {
  const [meetingUrl, setMeetingUrl] = useState("");
  const [botId, setBotId] = useState(null);
  const [recordingId, setRecordingId] = useState(null);
  const [transcriptId, setTranscriptId] = useState(null);
  const [transcript, setTranscript] = useState([]);
  const pollIntervalRef = useRef(null);

  const API_KEY = import.meta.env.VITE_RECALL_API_KEY;

  const headers = {
    Authorization: `Token ${API_KEY}`,
    "Content-Type": "application/json",
    Accept: "application/json",
  };

  const startBot = async () => {
    const res = await fetch("/api/v1/bot/", {
      method: "POST",
      headers,
      body: JSON.stringify({
        meeting_url: meetingUrl,
        recording_config: {
          transcript: {
            provider: {
              meeting_captions: {},
            },
          },
        },
      }),
    });

    const data = await res.json();
    setBotId(data.id);

    const recId = data.recordings?.id;
    if (recId) {
      setRecordingId(recId);
      startPollingForTranscriptId(recId);
    }
  };

  const stopBot = async () => {
    if (!botId) return;

    await fetch(`/api/v1/bot/${botId}/leave_call/`, {
      method: "POST",
      headers: { Authorization: `Token ${API_KEY}` },
    });

    clearInterval(pollIntervalRef.current);
    setBotId(null);
    setRecordingId(null);
    setTranscriptId(null);
  };

  const startPollingForTranscriptId = (recId) => {
    pollIntervalRef.current = setInterval(async () => {
      try {
        const res = await fetch(`/api/v1/transcript/?recording_id=${recId}`, {
          headers: { Authorization: `Token ${API_KEY}` },
        });

        const json = await res.json();
        const found = json.results?.[0]?.id;
        if (found) {
          setTranscriptId(found);
          clearInterval(pollIntervalRef.current);
          startPollingTranscriptContent(found);
        }
      } catch (err) {
        console.warn("Waiting for transcript ID...");
      }
    }, 5000);
  };

  const startPollingTranscriptContent = (id) => {
    pollIntervalRef.current = setInterval(async () => {
      try {
        const res = await fetch(`/api/v1/transcript/${id}/`, {
          headers: { Authorization: `Token ${API_KEY}` },
        });
        const json = await res.json();

        const lines = json.transcript?.map(
          (entry) =>
            `${entry.speaker}: ${entry.words.map((w) => w.text).join(" ")}`,
        );

        if (lines) setTranscript(lines);
      } catch (err) {
        console.warn("Transcript data not available yet.");
      }
    }, 5000);
  };

  return (
    <div
      style={{
        display: "flex",
        flexDirection: "column",
        alignItems: "center",
        justifyContent: "center",
        height: "100vh",
        gap: "1rem",
      }}
    >
      <input
        style={{ width: "400px", padding: "0.5rem" }}
        placeholder="Enter Meet URL"
        value={meetingUrl}
        onChange={(e) => setMeetingUrl(e.target.value)}
      />
      <div>
        <button onClick={startBot} disabled={!!botId}>
          Start Bot
        </button>
        <button onClick={stopBot} disabled={!botId}>
          Stop Bot
        </button>
      </div>
      <textarea
        readOnly
        style={{
          width: "600px",
          height: "300px",
          padding: "1rem",
          whiteSpace: "pre-wrap",
          overflowY: "scroll",
        }}
        value={transcript.join("\n")}
      />
    </div>
  );
}
